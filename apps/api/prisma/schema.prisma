// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples") // if you want to use snake_case format
}

model User {
  id              Int           @id @default(autoincrement())
  fullName        String
  password        String
  email           String        @unique
  contact         String?
  address         String?
  referral_number String        @unique
  updateAt        DateTime      @updatedAt
  createdAt       DateTime      @default(now())
  roleId          Int
  role            Role          @relation(fields: [roleId], references: [id])
  point           Point[]
  userReward      UserReward[]
  userVoucher     UserVoucher[]
}

model Role {
  id   Int    @id @default(autoincrement())
  role String
  user User[]
}

model Event {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creatorName String
  eventDate   DateTime
  category    String
  eventName   String
  eventTime   String
  endTime     DateTime
  city        String
  price       Float
  description String
  image       String?
}

model Point {
  id      Int      @id @default(autoincrement())
  userId  Int      @unique
  amount  Int      @default(0) // Jumlah poin yang diperoleh, default diatur ke 0
  expired DateTime
  user    User     @relation(fields: [userId], references: [id])
}

model Reward {
  id         Int          @id @default(autoincrement())
  nameReward String
  persentase Int
  createAt   DateTime     @default(now())
  updateAt   DateTime     @updatedAt
  userReward UserReward[]
}

model UserReward {
  id        Int      @id @default(autoincrement())
  userId    Int
  rewardId  Int
  expiresAt DateTime
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reward    Reward   @relation(fields: [rewardId], references: [id], onDelete: Cascade)
}

model UserVoucher {
  id        Int      @id @default(autoincrement())
  userId    Int
  voucherId Int
  isUse     Boolean  @default(false)
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  voucher   Voucher  @relation(fields: [voucherId], references: [id], onDelete: Cascade)
}

model Voucher {
  id          Int           @id @default(autoincrement())
  nameVoucher String
  persentase  Int
  expiresAt   DateTime
  createAt    DateTime      @default(now())
  updateAt    DateTime      @updatedAt
  userVoucher UserVoucher[]
}
